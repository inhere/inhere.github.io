"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2516],{9613:(e,t,l)=>{l.d(t,{Zo:()=>p,kt:()=>k});var n=l(9496);function i(e,t,l){return t in e?Object.defineProperty(e,t,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[t]=l,e}function o(e,t){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),l.push.apply(l,n)}return l}function a(e){for(var t=1;t<arguments.length;t++){var l=null!=arguments[t]?arguments[t]:{};t%2?o(Object(l),!0).forEach((function(t){i(e,t,l[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):o(Object(l)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(l,t))}))}return e}function r(e,t){if(null==e)return{};var l,n,i=function(e,t){if(null==e)return{};var l,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)l=o[n],t.indexOf(l)>=0||(i[l]=e[l]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)l=o[n],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(i[l]=e[l])}return i}var g=n.createContext({}),s=function(e){var t=n.useContext(g),l=t;return e&&(l="function"==typeof e?e(t):a(a({},t),e)),l},p=function(e){var t=s(e.components);return n.createElement(g.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var l=e.components,i=e.mdxType,o=e.originalType,g=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),u=s(l),c=i,k=u["".concat(g,".").concat(c)]||u[c]||m[c]||o;return l?n.createElement(k,a(a({ref:t},p),{},{components:l})):n.createElement(k,a({ref:t},p))}));function k(e,t){var l=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=l.length,a=new Array(o);a[0]=c;var r={};for(var g in t)hasOwnProperty.call(t,g)&&(r[g]=t[g]);r.originalType=e,r[u]="string"==typeof e?e:i,a[1]=r;for(var s=2;s<o;s++)a[s]=l[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,l)}c.displayName="MDXCreateElement"},7468:(e,t,l)=>{l.r(t),l.d(t,{assets:()=>g,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>s});var n=l(1966),i=(l(9496),l(9613));const o={title:"slog - Lightweight, configurable, extensible Go logging library",tags:["golang","gookit","log","logger"],date:"2022-06-16T21:00",slug:"gookit-slog-intro",authors:"inhere"},a=void 0,r={permalink:"/en/blog/gookit-slog-intro",editUrl:"https://github.com/inhere/inhere.github.io/tree/main/blog/2022/06-16-gookit-slog-intro.md",source:"@site/i18n/en/docusaurus-plugin-content-blog/2022/06-16-gookit-slog-intro.md",title:"slog - Lightweight, configurable, extensible Go logging library",description:"slog - a lightweight, configurable, extensible Go logging library",date:"2022-06-16T21:00:00.000Z",formattedDate:"June 16, 2022",tags:[{label:"golang",permalink:"/en/blog/tags/golang"},{label:"gookit",permalink:"/en/blog/tags/gookit"},{label:"log",permalink:"/en/blog/tags/log"},{label:"logger",permalink:"/en/blog/tags/logger"}],readingTime:1.925,hasTruncateMarker:!1,authors:[{name:"inhere",title:"docs maintainer",url:"https://github.com/inhere",imageURL:"https://github.com/inhere.png",key:"inhere"}],frontMatter:{title:"slog - Lightweight, configurable, extensible Go logging library",tags:["golang","gookit","log","logger"],date:"2022-06-16T21:00",slug:"gookit-slog-intro",authors:"inhere"},prevItem:{title:"gitw - Git \u547d\u4ee4\u5305\u88c5\u5668\uff0c\u751f\u6210 git \u53d8\u66f4\u8bb0\u5f55\u65e5\u5fd7",permalink:"/en/blog/gookit-gitw-intro"},nextItem:{title:"pflag - \u66f4\u597d\u7684PHP\u547d\u4ee4\u884c\u9009\u9879\u89e3\u6790\u5e93",permalink:"/en/blog/pflag-better-php-command-line-parse-library"}},g={authorsImageUrls:[void 0]},s=[{value:"Features",id:"features",level:2},{value:"Output logs to file",id:"output-logs-to-file",level:3},{value:"Git repository",id:"git-repository",level:2},{value:"Install",id:"install",level:2},{value:"Quick start",id:"quick-start",level:2},{value:"Logs to file",id:"logs-to-file",level:2},{value:"More usage",id:"more-usage",level:2}],p={toc:s},u="wrapper";function m(e){let{components:t,...l}=e;return(0,i.kt)(u,(0,n.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"slog")," - a lightweight, configurable, extensible Go logging library"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/gookit/slog/master/_example/images/console-log-all-level.png",alt:"image"})),(0,i.kt)("h2",{id:"features"},"Features"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Simple, directly available without configuration"),(0,i.kt)("li",{parentName:"ul"},"Support common log level processing.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"eg: ",(0,i.kt)("inlineCode",{parentName:"li"},"trace")," ",(0,i.kt)("inlineCode",{parentName:"li"},"debug")," ",(0,i.kt)("inlineCode",{parentName:"li"},"info")," ",(0,i.kt)("inlineCode",{parentName:"li"},"notice")," ",(0,i.kt)("inlineCode",{parentName:"li"},"warn")," ",(0,i.kt)("inlineCode",{parentName:"li"},"error")," ",(0,i.kt)("inlineCode",{parentName:"li"},"fatal")," ",(0,i.kt)("inlineCode",{parentName:"li"},"panic")))),(0,i.kt)("li",{parentName:"ul"},"Support any extension of ",(0,i.kt)("inlineCode",{parentName:"li"},"Handler")," ",(0,i.kt)("inlineCode",{parentName:"li"},"Formatter")," as needed"),(0,i.kt)("li",{parentName:"ul"},"Supports adding multiple ",(0,i.kt)("inlineCode",{parentName:"li"},"Handler")," log processing at the same time, outputting logs to different places"),(0,i.kt)("li",{parentName:"ul"},"Support to custom log message ",(0,i.kt)("inlineCode",{parentName:"li"},"Formatter"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Built-in ",(0,i.kt)("inlineCode",{parentName:"li"},"json")," ",(0,i.kt)("inlineCode",{parentName:"li"},"text")," two log record formatting ",(0,i.kt)("inlineCode",{parentName:"li"},"Formatter")))),(0,i.kt)("li",{parentName:"ul"},"Support to custom build log messages ",(0,i.kt)("inlineCode",{parentName:"li"},"Handler"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The built-in ",(0,i.kt)("inlineCode",{parentName:"li"},"handler.Config")," ",(0,i.kt)("inlineCode",{parentName:"li"},"handler.Builder")," can easily and quickly build the desired log handler"))),(0,i.kt)("li",{parentName:"ul"},"Has built-in common log write handler program",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"console")," output logs to the console, supports color output"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"writer")," output logs to the specified ",(0,i.kt)("inlineCode",{parentName:"li"},"io.Writer")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"file")," output log to the specified file, optionally enable ",(0,i.kt)("inlineCode",{parentName:"li"},"buffer")," to buffer writes"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"simple")," output log to the specified file, write directly to the file without buffering"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rotate_file")," outputs logs to the specified file, and supports splitting files by time and size, and ",(0,i.kt)("inlineCode",{parentName:"li"},"buffer")," buffered writing is enabled by default"),(0,i.kt)("li",{parentName:"ul"},"See ./handler folder for more built-in implementations")))),(0,i.kt)("h3",{id:"output-logs-to-file"},"Output logs to file"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Support enabling ",(0,i.kt)("inlineCode",{parentName:"li"},"buffer")," for log writing"),(0,i.kt)("li",{parentName:"ul"},"Support splitting log files by ",(0,i.kt)("inlineCode",{parentName:"li"},"time")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"size")),(0,i.kt)("li",{parentName:"ul"},"Support configuration to compress log files via ",(0,i.kt)("inlineCode",{parentName:"li"},"gzip")),(0,i.kt)("li",{parentName:"ul"},"Support clean old log files by ",(0,i.kt)("inlineCode",{parentName:"li"},"BackupNum")," ",(0,i.kt)("inlineCode",{parentName:"li"},"BackupTime"))),(0,i.kt)("h2",{id:"git-repository"},"Git repository"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Github: ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/gookit/slog"},"https://github.com/gookit/slog")),(0,i.kt)("li",{parentName:"ul"},"Gitee: ",(0,i.kt)("a",{parentName:"li",href:"https://gitee.com/gookit/slog"},"https://gitee.com/gookit/slog"))),(0,i.kt)("h2",{id:"install"},"Install"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"go get github.com/gookit/slog\n")),(0,i.kt)("h2",{id:"quick-start"},"Quick start"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "github.com/gookit/slog"\n)\n\nfunc main() {\n    slog.Trace("this is a log message")\n    slog.Debug("this is a log message")\n    slog.Info("this is a log message")\n    slog.Notice("this is a log message")\n    slog.Warn("this is a log message")\n    slog.Error("this is a log message")\n    slog.Fatal("this is a log message")\n}\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"output preview:")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/gookit/slog/master/_example/images/console-log-all-level.png",alt:"image"})),(0,i.kt)("h2",{id:"logs-to-file"},"Logs to file"),(0,i.kt)("p",null,"Using ",(0,i.kt)("inlineCode",{parentName:"p"},"slog")," to output logs to files is very convenient, and supports multiple files, splitting by time, etc."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "github.com/gookit/slog"\n    "github.com/gookit/slog/handler"\n    "github.com/gookit/slog/rotatefile"\n)\n\nfunc main() {\n    defer slog.MustFlush()\n\n    // DangerLevels contains: slog.PanicLevel, slog.ErrorLevel, slog.WarnLevel\n    h1 := handler.MustRotateFile("/tmp/logs/app_error.log", rotatefile.EveryHour,\n        handler.WithLogLevels(slog.DangerLevels),\n    )\n\n    // NormalLevels contains: slog.InfoLevel, slog.NoticeLevel, slog.DebugLevel, slog.TraceLevel\n    h2 := handler.MustRotateFile("/tmp/logs/app_info.log", rotatefile.EveryHour,\n        handler.WithLogLevels(slog.NormalLevels),\n    )\n\n    slog.PushHandler(h1)\n    slog.PushHandler(h2)\n\n    // add logs\n    slog.Info("info message text")\n    slog.Error("error message text")\n}\n')),(0,i.kt)("p",null,"See logs dir:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ ls /tmp/logs\napp_error.log\napp_info.log\n")),(0,i.kt)("h2",{id:"more-usage"},"More usage"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"More usage please see ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/gookit/slog/blob/master/README.zh-CN.md"},"README"))))}m.isMDXComponent=!0}}]);