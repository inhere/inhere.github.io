"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2733],{9613:(n,e,t)=>{t.d(e,{Zo:()=>p,kt:()=>u});var r=t(9496);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function a(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},o=Object.keys(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var c=r.createContext({}),l=function(n){var e=r.useContext(c),t=e;return n&&(t="function"==typeof n?n(e):a(a({},e),n)),t},p=function(n){var e=l(n.components);return r.createElement(c.Provider,{value:e},n.children)},h="mdxType",m={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},$=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,o=n.originalType,c=n.parentName,p=s(n,["components","mdxType","originalType","parentName"]),h=l(t),$=i,u=h["".concat(c,".").concat($)]||h[$]||m[$]||o;return t?r.createElement(u,a(a({ref:e},p),{},{components:t})):r.createElement(u,a({ref:e},p))}));function u(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var o=t.length,a=new Array(o);a[0]=$;var s={};for(var c in e)hasOwnProperty.call(e,c)&&(s[c]=e[c]);s.originalType=n,s[h]="string"==typeof n?n:i,a[1]=s;for(var l=2;l<o;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}$.displayName="MDXCreateElement"},3017:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=t(1966),i=(t(9496),t(9613));const o={title:"php \u5b9e\u73b0\u4e00\u4e2a Telnet \u5de5\u5177\u7c7b",tags:["php","socket","telnet"],date:"2017-05-12T09:47",slug:"implement-a-telnet-tool-in-php",authors:"inhere"},a=void 0,s={permalink:"/en/blog/implement-a-telnet-tool-in-php",editUrl:"https://github.com/inhere/inhere.github.io/tree/main/blog/2017/05-12-implement-a-telnet-tool-in-php.md",source:"@site/blog/2017/05-12-implement-a-telnet-tool-in-php.md",title:"php \u5b9e\u73b0\u4e00\u4e2a Telnet \u5de5\u5177\u7c7b",description:"\u4f7f\u7528php \u91cc\u7684 socket \u76f8\u5173\u51fd\u6570\uff0c\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684 Telnet \u5de5\u5177\u7c7b\u3002",date:"2017-05-12T09:47:00.000Z",formattedDate:"May 12, 2017",tags:[{label:"php",permalink:"/en/blog/tags/php"},{label:"socket",permalink:"/en/blog/tags/socket"},{label:"telnet",permalink:"/en/blog/tags/telnet"}],readingTime:4.79,hasTruncateMarker:!0,authors:[{name:"inhere",title:"docs maintainer",url:"https://github.com/inhere",imageURL:"https://github.com/inhere.png",key:"inhere"}],frontMatter:{title:"php \u5b9e\u73b0\u4e00\u4e2a Telnet \u5de5\u5177\u7c7b",tags:["php","socket","telnet"],date:"2017-05-12T09:47",slug:"implement-a-telnet-tool-in-php",authors:"inhere"},prevItem:{title:"php\u4e2d\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u6a21\u5f0f\u4fee\u9970\u7b26",permalink:"/en/blog/regex-pattern-mode-in-php"},nextItem:{title:"PHP\u8c03\u8bd5\u7684\u5f3a\u608d\u5229\u5668\u4e4bPHPDBG",permalink:"/en/blog/debug-tool-phpdbg-usage-in-php"}},c={authorsImageUrls:[void 0]},l=[{value:"\u7b80\u5355\u4f7f\u7528",id:"\u7b80\u5355\u4f7f\u7528",level:2}],p={toc:l},h="wrapper";function m(n){let{components:e,...t}=n;return(0,i.kt)(h,(0,r.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"\u4f7f\u7528php \u91cc\u7684 socket \u76f8\u5173\u51fd\u6570\uff0c\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684 Telnet \u5de5\u5177\u7c7b\u3002"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u652f\u6301\u53d1\u9001\u547d\u4ee4\uff0c\u83b7\u53d6\u7ed3\u679c"),(0,i.kt)("li",{parentName:"ul"},"\u8fdb\u5165\u4ea4\u4e92\u73af\u5883\uff0c\u7c7b\u4f3c\u4e8e\u547d\u4ee4\u884c\u5de5\u5177telnet"),(0,i.kt)("li",{parentName:"ul"},"\u6301\u7eed\u7684\u76d1\u63a7\u4e00\u4e2a\u547d\u4ee4 \uff0c\u7c7b\u4f3c\u4e8e\u547d\u4ee4\u884c\u7684 watch")),(0,i.kt)("p",null,"\u53ef\u9009\u62e9\u4f7f\u7528\u4e09\u79cd\u8fde\u63a5\u65b9\u5f0f"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"fsockopen - php \u5185\u7f6e\u51fd\u6570"),(0,i.kt)("li",{parentName:"ul"},"socket - \u9700\u8981 ",(0,i.kt)("inlineCode",{parentName:"li"},"sockets")," \u6269\u5c55"),(0,i.kt)("li",{parentName:"ul"},"stream - \u4f7f\u7528 ",(0,i.kt)("inlineCode",{parentName:"li"},"stream_*")," \u76f8\u5173\u51fd\u6570")),(0,i.kt)("p",null,"\u5b8c\u6574\u4ee3\u7801",(0,i.kt)("a",{parentName:"p",href:"https://gist.github.com/inhere/f39d2d1641b2282e54ecefa84a5af8b4#file-telnet-php"},"\u6e90\u6587\u4ef6"),"\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\n/**\n * Class Telnet\n */\nclass Telnet\n{\n    const DRIVER_SOCKET = 'socket';\n    const DRIVER_STREAM = 'stream';\n    const DRIVER_FSOCK = 'fsock';\n\n    /**\n     * @var array\n     */\n    private static $availableDrivers = [\n        'socket' => 'socket_create',\n        'stream' => 'stream_socket_client',\n        'fsock' => 'fsockopen',\n    ];\n\n    /**\n     * @var resource\n     */\n    private $sock;\n\n    /**\n     * @var string\n     */\n    private $driver;\n\n    /**\n     * @var string\n     */\n    private $host;\n\n    /**\n     * @var int\n     */\n    private $port;\n\n    /**\n     * @var array\n     */\n    private $config = [\n        'driver' => '', // 'fsock' 'stream' 'socket'. if is empry, will auto select.\n\n        // \u8bbe\u7f6e\u963b\u585e\u6216\u8005\u975e\u963b\u585e\u6a21\u5f0f\n        'blocking' => true,\n\n        // 10s\n        'timeout' => 10,\n\n        // max watch time 180s, when use watch\n        'max_watch_time' => 180,\n    ];\n\n    /**\n     * Telnet constructor.\n     * @param string $host\n     * @param int $port\n     * @param array $config\n     */\n    public function __construct($host = '127.0.0.1', $port = 80, array $config = [])\n    {\n        $this->host = $host ?: '127.0.0.1';\n        $this->port = $port ?: 80;\n\n        $this->setConfig($config);\n\n        $this->init();\n\n        $this->connect($this->host, $this->port);\n    }\n\n    protected function init()\n    {\n        $driver = $this->config['driver'];\n\n        if (!$driver || !isset(self::$availableDrivers[$driver])) {\n            foreach (self::$availableDrivers as $name => $funcName) {\n                if (function_exists($funcName)) {\n                    $driver = $name;\n                    break;\n                }\n            }\n        }\n\n        $this->driver = $driver;\n    }\n\n    /**\n     * @param string $host\n     * @param string $port\n     */\n    protected function connect($host, $port)\n    {\n        try {\n            $this->doConnect($host, $port, $this->driver);\n        } catch (\\Exception $e) {\n            throw new \\RuntimeException(\"Use {$this->driver} connect to the server {$host}:{$port} failed, ERROR({$e->getCode()}): {$e->getMessage()}\", -500);\n        }\n    }\n\n    /**\n     * @param string $host\n     * @param string $port\n     * @param string $driver\n     */\n    protected function doConnect($host, $port, $driver)\n    {\n        $errNo = $errStr = null;\n\n        switch ($driver) {\n            case self::DRIVER_SOCKET:\n                $this->sock = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n                if ($this->sock === false) {\n                    throw new \\RuntimeException('socket_create() failed. Reason: ' . socket_strerror(socket_last_error()), -400);\n                }\n\n                if (socket_connect($this->sock, $host, $port) === false) {\n                    throw new \\RuntimeException('socket_connect() failed. Reason: ' . socket_strerror(socket_last_error()), -450);\n                }\n\n                if ($this->config['blocking']) {\n                    socket_set_block($this->sock);\n                } else {\n                    socket_set_nonblock($this->sock);\n                }\n\n                socket_set_option($this->sock, SOL_SOCKET, SO_RCVTIMEO, [\n                    'sec' => $this->config['timeout'],\n                    'usec' => null\n                ]);\n                break;\n\n            case self::DRIVER_STREAM:\n                $this->sock = stream_socket_client(\n                    \"tcp://{$host}:{$port}\",\n                    $errNo,\n                    $errStr,\n                    $this->config['timeout'],\n                    STREAM_CLIENT_CONNECT | STREAM_CLIENT_PERSISTENT\n                );\n                break;\n\n            case self::DRIVER_FSOCK:\n            default:\n                $this->sock = fsockopen($host, $port, $errNo, $errStr, $this->config['timeout']);\n                break;\n        }\n\n        if (!$this->sock) {\n            throw new \\RuntimeException(\"Connect to the {$host}:{$port} failed, ERROR: $errNo - $errStr\", -500);\n        }\n\n        if ($driver !== self::DRIVER_SOCKET) {\n            stream_set_blocking($this->sock, $this->config['blocking'] ? 1 : 0);\n            stream_set_timeout($this->sock, $this->config['timeout'], 0);\n        }\n    }\n\n    /**\n     * watch a command\n     * @param  string  $command\n     * @param  integer $interval (ms)\n     */\n    public function watch($command, $interval = 500)\n    {\n        $count = 0;\n        $activeTime = time();\n        $maxTime = (int)$this->config['max_watch_time'];\n        $intervalUs = $interval * 1000;\n\n        echo \"watch command: $command, refresh interval: {$interval}ms\\n\";\n\n        while (true) {\n            $count++;\n            $result = $this->command($command);\n\n            if (0 === strpos($result, 'ERR')) {\n                echo \"$result\\n\";\n                echo \"error command: $command. \";\n                break;\n            }\n\n            // clear screen before output\n            echo \"\\033[2JThe {$count} times watch {$command} result(refresh interval: {$interval}ms):\\n{$result}\\n\";\n\n            if ($maxTime > 0 && time() - $activeTime >= $maxTime) {\n                echo \"watch time end. \";\n                break;\n            }\n\n            usleep($intervalUs);\n        }\n\n        echo \"Quit\\n\";\n    }\n\n    /**\n     * into interactive environment\n     */\n    public function interactive()\n    {\n        echo \"welcome! please input command('quit' or 'exit' to Quit).\\n \";\n\n        while (true) {\n            echo \"> \";\n            if ($cmd = trim(fgets(\\STDIN))) {\n                // echo \"input command: $cmd\\n\";\n                if ($cmd === 'quit' || $cmd === 'exit') {\n                    echo \"Quit. Bye\\n\";\n                    break;\n                }\n\n                echo $this->command($cmd) . PHP_EOL;\n            }\n\n            usleep(50000);\n        }\n\n        $this->close();\n    }\n\n    /**\n     * send command\n     * @param  string $command\n     * @param bool $readResult\n     * @param int $readSize\n     * @return false|int|string\n     */\n    public function command($command, $readResult = true, $readSize = 1024)\n    {\n        $len = $this->write(trim($command) . \"\\r\\n\");\n\n        if ($readResult) {\n            return $this->read($readSize);\n        }\n\n        return $len;\n    }\n\n    /**\n     * write\n     * @param  string $buffer\n     * @return int|false\n     */\n    public function write($buffer)\n    {\n        if ($this->driver === self::DRIVER_SOCKET) {\n            return socket_write($this->sock, $buffer, strlen($buffer));\n        } else {\n            // $buffer = str_replace(chr(255), chr(255) . chr(255), $buffer);\n            return fwrite($this->sock, $buffer);\n        }\n    }\n\n    /**\n     * read\n     * @param  integer $size\n     * @return string|false\n     */\n    public function read($size = 1024)\n    {\n        if ($this->driver === self::DRIVER_SOCKET) {\n            return socket_read($this->sock, $size);\n        } else {\n            return fread($this->sock, $size);\n        }\n    }\n\n    public function close()\n    {\n        if ($this->sock) {\n            if ($this->driver === self::DRIVER_SOCKET) {\n                socket_close($this->sock);\n            } else {\n                fclose($this->sock);\n            }\n\n            $this->sock = null;\n        }\n    }\n\n    /**\n     * @return resource\n     */\n    public function getSock()\n    {\n        return $this->sock;\n    }\n\n    /**\n     * @return array\n     */\n    public function getConfig()\n    {\n        return $this->config;\n    }\n\n    /**\n     * @param array $config\n     */\n    public function setConfig(array $config)\n    {\n        if ($config) {\n            $this->config = array_merge($this->config, $config);\n        }\n    }\n\n    public function __destruct()\n    {\n        $this->close();\n    }\n}\n")),(0,i.kt)("h2",{id:"\u7b80\u5355\u4f7f\u7528"},"\u7b80\u5355\u4f7f\u7528"),(0,i.kt)("p",null,"\u7f16\u5199\u4e00\u4e2a\u7b80\u5355\u7684\u5165\u53e3\u6587\u4ef6",(0,i.kt)("inlineCode",{parentName:"p"},"telnet.php"),"\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"global $argv;\n$opts = getopt('h', ['help']);\n\nif (isset($opts['h']) || isset($opts['help'])) {\n    $script = array_shift($argv);\n    $help = <<<EOF\nStart a telnet client.\n\nUsage:\n  php $script HOST [PORT]\n\nOptions:\n  -h,--help  Show this help information\n\\n\nEOF;\n    exit($help);\n}\n\n$host = isset($argv[1]) ? $argv[1] : '127.0.0.1';\n$port = isset($argv[2]) ? $argv[2] : 4730;\n\necho \"Connect to the server {$host}:{$port}\\n\";\n\n$tt = new Telnet($host, $port);\n\n// echo $tt->command('status');\n// $tt->watch('status');\n$tt->interactive(); // \u8fdb\u5165\u4ea4\u4e92\u73af\u5883\uff0c\u7c7b\u4f3c\u4e8e\u547d\u4ee4\u884c\u5de5\u5177telnet\n")),(0,i.kt)("p",null,"\u8c03\u7528\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"php telnet.php 127.0.0.1 11211\n")))}m.isMDXComponent=!0}}]);