"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7350],{9613:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(9496);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),g=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=g(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=g(n),c=l,d=u["".concat(s,".").concat(c)]||u[c]||m[c]||r;return n?a.createElement(d,i(i({ref:t},p),{},{components:n})):a.createElement(d,i({ref:t},p))}));function d(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:l,i[1]=o;for(var g=2;g<r;g++)i[g]=n[g];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9203:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>g});var a=n(1966),l=(n(9496),n(9613));const r={title:"cflag - wraps and extends Go flag build pertty CLI command",tags:["golang","gookit","flag","cli","console"],date:"2022-07-09T16:00",slug:"gookit-goutil-cflag-intro",authors:"inhere"},i=void 0,o={permalink:"/en/blog/gookit-goutil-cflag-intro",editUrl:"https://github.com/inhere/inhere.github.io/tree/main/blog/2022/07-09-gookit-goutil-cflag-usage.md",source:"@site/i18n/en/docusaurus-plugin-content-blog/2022/07-09-gookit-goutil-cflag-usage.md",title:"cflag - wraps and extends Go flag build pertty CLI command",description:"cflag - wraps and extends Go flag build pertty CLI command",date:"2022-07-09T16:00:00.000Z",formattedDate:"July 9, 2022",tags:[{label:"golang",permalink:"/en/blog/tags/golang"},{label:"gookit",permalink:"/en/blog/tags/gookit"},{label:"flag",permalink:"/en/blog/tags/flag"},{label:"cli",permalink:"/en/blog/tags/cli"},{label:"console",permalink:"/en/blog/tags/console"}],readingTime:3.47,hasTruncateMarker:!0,authors:[{name:"inhere",title:"docs maintainer",url:"https://github.com/inhere",imageURL:"https://github.com/inhere.png",key:"inhere"}],frontMatter:{title:"cflag - wraps and extends Go flag build pertty CLI command",tags:["golang","gookit","flag","cli","console"],date:"2022-07-09T16:00",slug:"gookit-goutil-cflag-intro",authors:"inhere"},prevItem:{title:"\u5b89\u88c5\u5e76\u914d\u7f6e docusaurus v2\u7ad9\u70b9",permalink:"/en/blog/install-and-config-docusaurus-v2.md"},nextItem:{title:"gitw - Git \u547d\u4ee4\u5305\u88c5\u5668\uff0c\u751f\u6210 git \u53d8\u66f4\u8bb0\u5f55\u65e5\u5fd7",permalink:"/en/blog/gookit-gitw-intro"}},s={authorsImageUrls:[void 0]},g=[{value:"Use Go flag",id:"use-go-flag",level:2},{value:"Show help",id:"show-help",level:3},{value:"Some problems",id:"some-problems",level:3},{value:"Use cflag",id:"use-cflag",level:2},{value:"Install",id:"install",level:3},{value:"Usage example",id:"usage-example",level:3},{value:"Set required and shortcuts",id:"set-required-and-shortcuts",level:3},{value:"<code>usage</code> format",id:"usage-format",level:4},{value:"Binding and get arguments",id:"binding-and-get-arguments",level:3},{value:"Show help",id:"show-help-1",level:3},{value:"Run command",id:"run-command",level:3},{value:"<code>required</code> check",id:"required-check",level:3},{value:"GitHub",id:"github",level:2}],p={toc:g},u="wrapper";function m(e){let{components:t,...n}=e;return(0,l.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"cflag")," - wraps and extends Go flag build pertty CLI command"),(0,l.kt)("h2",{id:"use-go-flag"},"Use Go flag"),(0,l.kt)("p",null,"Go ",(0,l.kt)("inlineCode",{parentName:"p"},"flag")," is a package built into Go, and it is very easy to build a command application using the ",(0,l.kt)("inlineCode",{parentName:"p"},"flag")," package."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="cflag/_example/rawflag.go"',title:'"cflag/_example/rawflag.go"'},'package main\n\nimport (\n    "flag"\n    "os"\n\n    "github.com/gookit/goutil/cliutil"\n    "github.com/gookit/goutil/dump"\n)\n\nvar opts1 = struct {\n    age  int\n    name string\n    str1 string\n    lOpt string\n}{}\n\n// go run ./_example/rawflag.go\n// go run ./cflag/_example/rawflag.go -h\nfunc main() {\n    c := flag.NewFlagSet("mycmd", flag.ContinueOnError)\n\n    c.IntVar(&opts1.age, "age", 0, "this is a int option")\n    c.StringVar(&opts1.name, "name", "", "this is a string option and required")\n    c.StringVar(&opts1.str1, "str1", "def-val", "this is a string option with default value")\n    c.StringVar(&opts1.lOpt, "long-opt", "", "this is a string option with shorts")\n\n    err := c.Parse(os.Args[1:])\n    if err != nil {\n        if err != flag.ErrHelp {\n            cliutil.Errorln("Error:", err.Error())\n        }\n        return\n    }\n\n    // after parse, do something\n    handleFunc1()\n}\n\nfunc handleFunc1() {\n    cliutil.Infoln("after parse, do something")\n\n    dump.P(opts1)\n}\n')),(0,l.kt)("h3",{id:"show-help"},"Show help"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"go run ./cflag/_example/rawflag.go -h\n")),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/gookit/goutil/master/cflag/_example/rawflag-help.png",alt:"rawflag-help"})),(0,l.kt)("h3",{id:"some-problems"},"Some problems"),(0,l.kt)("p",null,"It's a package built into Go, and it's very simple to use. But there are some problems:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Adding short options to options is not supported"),(0,l.kt)("li",{parentName:"ul"},"Does not support parsing subsequent parameter information"),(0,l.kt)("li",{parentName:"ul"},"Can't check if option is empty"),(0,l.kt)("li",{parentName:"ul"},"Rendering help information is very rudimentary")),(0,l.kt)("h2",{id:"use-cflag"},"Use cflag"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"cflag")," - Wraps and extends go ",(0,l.kt)("inlineCode",{parentName:"p"},"flag.FlagSet")," to build simple command line applications"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"As easy as Go ",(0,l.kt)("inlineCode",{parentName:"li"},"flag")," to use"),(0,l.kt)("li",{parentName:"ul"},"Supports auto-rendering of pretty help messages"),(0,l.kt)("li",{parentName:"ul"},"Allows adding short options to flag options, and multiples"),(0,l.kt)("li",{parentName:"ul"},"Allows binding named parameters"),(0,l.kt)("li",{parentName:"ul"},"Allows setting arguments or options as required"),(0,l.kt)("li",{parentName:"ul"},"Allows setting validators for arguments or options")),(0,l.kt)("h3",{id:"install"},"Install"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"go get github.com/gookit/goutil/cflag\n")),(0,l.kt)("h3",{id:"usage-example"},"Usage example"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"cflag")," has the same binding option information as Go ",(0,l.kt)("inlineCode",{parentName:"p"},"flag"),". At the same time, some additional information has been added, such as version, description, etc."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="cflag/_example/cmd.go"',title:'"cflag/_example/cmd.go"'},'package main\n\nimport (\n    "os"\n\n    "github.com/gookit/goutil/cflag"\n    "github.com/gookit/goutil/cliutil"\n)\n\nvar opts = struct {\n    age  int\n    name string\n    str1 string\n    lOpt string\n    bol  bool\n}{}\n\n// go run ./_example/cmd.go\n// go run ./cflag/_example/cmd.go -h\n// go run ./cflag/_example/cmd.go --name inhere -a 12 --lo val ab cd\nfunc main() {\n    c := cflag.New(func(c *cflag.CFlags) {\n        c.Desc = "this is a demo command"\n        c.Version = "0.5.1"\n    })\n    c.IntVar(&opts.age, "age", 0, "this is a int option;;a")\n    c.StringVar(&opts.name, "name", "", "this is a string option and required;true")\n    c.StringVar(&opts.str1, "str1", "def-val", "this is a string option with default value;;s")\n    c.StringVar(&opts.lOpt, "long-opt", "", "this is a string option with shorts;;lo")\n\n    // highlight-start\n    c.AddArg("arg1", "this is arg1", true, nil)\n    c.AddArg("arg2", "this is arg2", true, nil)\n    // highlight-end\n\n    // add handle func\n    c.Func = handleFunc\n\n    c.MustParse(os.Args[1:])\n}\n\nfunc handleFunc(c *cflag.CFlags) error {\n    cliutil.Magentaln("hello, this is command:", c.Name())\n    cliutil.Infoln("after parse, do something ...")\n\n    cliutil.Yellowln("option values:")\n    cliutil.Infoln("opts.age =", opts.age)\n    cliutil.Infoln("opts.name =", opts.name)\n    cliutil.Infoln("opts.str1 =", opts.str1)\n    cliutil.Infoln("opts.lOpt =", opts.lOpt)\n\n    // highlight-start\n    cliutil.Yellowln("argument values:")\n    cliutil.Infoln("arg1 =", c.Arg("arg1").String())\n    cliutil.Infoln("arg2 =", c.Arg("arg2").String())\n    // highlight-end\n\n    cliutil.Infoln("\\nremain args =", c.RemainArgs())\n\n    return nil\n}\n')),(0,l.kt)("h3",{id:"set-required-and-shortcuts"},"Set required and shortcuts"),(0,l.kt)("p",null,"Option can be set as required(",(0,l.kt)("inlineCode",{parentName:"p"},"required"),"), and supports setting ",(0,l.kt)("strong",{parentName:"p"},"short option")," name."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"TIPs: Implement ",(0,l.kt)("inlineCode",{parentName:"p"},"required")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"shorts")," by extending ",(0,l.kt)("inlineCode",{parentName:"p"},"usage")," that parses options")),(0,l.kt)("h4",{id:"usage-format"},(0,l.kt)("inlineCode",{parentName:"h4"},"usage")," format"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Defatul: ",(0,l.kt)("inlineCode",{parentName:"li"},"desc")),(0,l.kt)("li",{parentName:"ul"},"Foramt 1: ",(0,l.kt)("inlineCode",{parentName:"li"},"desc;required")),(0,l.kt)("li",{parentName:"ul"},"Foramt 2: ",(0,l.kt)("inlineCode",{parentName:"li"},"desc;required;shorts")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"required"),": A boolean string. Mark option is required",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"True: ",(0,l.kt)("inlineCode",{parentName:"li"},"true,on,yes")),(0,l.kt)("li",{parentName:"ul"},"False: ",(0,l.kt)("inlineCode",{parentName:"li"},"false,off,no,''")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"shorts"),": Shortcut names for options, multiple values are allowed, separated by commas ",(0,l.kt)("inlineCode",{parentName:"li"},","))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'    // set option \'name\' is required\n    c.StringVar(&opts.name, "name", "", "this is a string option and required;true")\n    // set option \'str1\' shorts: s\n    c.StringVar(&opts.str1, "str1", "def-val", "this is a string option with default value;;s")\n')),(0,l.kt)("h3",{id:"binding-and-get-arguments"},"Binding and get arguments"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Binding arguments")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'    c.AddArg("arg1", "this is arg1", true, nil)\n    c.AddArg("arg2", "this is arg2", true, nil)\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Get arguments by name")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'    cliutil.Infoln("arg1 =", c.Arg("arg1").String())\n    cliutil.Infoln("arg2 =", c.Arg("arg2").Int())\n')),(0,l.kt)("h3",{id:"show-help-1"},"Show help"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"go run ./cflag/_example/cmd.go -h\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Output"),":"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/gookit/goutil/master/cflag/_example/cmd-help.png",alt:"cmd-help"})),(0,l.kt)("h3",{id:"run-command"},"Run command"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"go run ./cflag/_example/cmd.go --name inhere -a 12 --lo val ab cd\ngo run ./cflag/_example/cmd.go --name inhere -a 12 --lo val ab cd de fg\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Output"),":"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/gookit/goutil/master/cflag/_example/cmd-run.png",alt:"cmd-run"})),(0,l.kt)("h3",{id:"required-check"},(0,l.kt)("inlineCode",{parentName:"h3"},"required")," check"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"go run ./cflag/_example/cmd.go -a 22\ngo run ./cflag/_example/cmd.go --name inhere\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Output"),":"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/gookit/goutil/master/cflag/_example/cmd-required.png",alt:"cmd-required.png"})),(0,l.kt)("h2",{id:"github"},"GitHub"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/gookit/goutil/tree/master/cflag"},"gookit/goutil/cflag"))))}m.isMDXComponent=!0}}]);