"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[263],{9613:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>c});var a=n(9496);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=u(n),g=i,c=m["".concat(s,".").concat(g)]||m[g]||d[g]||r;return n?a.createElement(c,l(l({ref:t},p),{},{components:n})):a.createElement(c,l({ref:t},p))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=g;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:i,l[1]=o;for(var u=2;u<r;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},518:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>u});var a=n(1966),i=(n(9496),n(9613));const r={title:"gookit/goutil - released v0.6.10, an extension library of common Go features",tags:["gookit","golang","goutil"],date:"2023-06-28T14:55",slug:"gookit-goutil-release-v0.6.10",authors:"inhere"},l=void 0,o={permalink:"/en/blog/gookit-goutil-release-v0.6.10",editUrl:"https://github.com/inhere/inhere.github.io/tree/main/blog/2023/06-28-gookit-goutil-release-v0.6.10.md",source:"@site/i18n/en/docusaurus-plugin-content-blog/2023/06-28-gookit-goutil-release-v0.6.10.md",title:"gookit/goutil - released v0.6.10, an extension library of common Go features",description:"gookit/goutil An extended library of Go's common functionality. Contains: number, string, slice/array, Map, struct, reflection, text, file, error, time and date, test, CLI, command run, system information, formatting, common information acquisition, etc.",date:"2023-06-28T14:55:00.000Z",formattedDate:"June 28, 2023",tags:[{label:"gookit",permalink:"/en/blog/tags/gookit"},{label:"golang",permalink:"/en/blog/tags/golang"},{label:"goutil",permalink:"/en/blog/tags/goutil"}],readingTime:5.12,hasTruncateMarker:!0,authors:[{name:"inhere",title:"docs maintainer",url:"https://github.com/inhere",imageURL:"https://github.com/inhere.png",key:"inhere"}],frontMatter:{title:"gookit/goutil - released v0.6.10, an extension library of common Go features",tags:["gookit","golang","goutil"],date:"2023-06-28T14:55",slug:"gookit-goutil-release-v0.6.10",authors:"inhere"},prevItem:{title:"gookit/goutil - Go\u5e38\u7528\u529f\u80fd\u7684\u6269\u5c55\u5de5\u5177\u5e93\uff0c\u53d1\u5e03 v0.6.12 \u7248\u672c",permalink:"/en/blog/gookit-goutil-release-v0.6.12"},nextItem:{title:"gookit/slog - release v0.5.2, Lightweight, configurable, extensible logging library",permalink:"/en/blog/gookit-slog-release-v0.5.2"}},s={authorsImageUrls:[void 0]},u=[{value:"v0.6.10 change log",id:"v0610-change-log",level:2},{value:"\u2728 New features",id:"-new-features",level:3},{value:"\ud83d\udc54 Update Adjustments",id:"-update-adjustments",level:3},{value:"Other adjustments",id:"other-adjustments",level:3},{value:"Some feature usage examples",id:"some-feature-usage-examples",level:3},{value:"dump - prints custom types",id:"dump---prints-custom-types",level:4},{value:"Initialize the struct",id:"initialize-the-struct",level:4},{value:"Test with Echo Server",id:"test-with-echo-server",level:4},{value:"v0.6.9 change log",id:"v069-change-log",level:2},{value:"\u2728 New features",id:"-new-features-1",level:3},{value:"\ud83d\udc54 Update adjustments",id:"-update-adjustments-1",level:3},{value:"Other adjustments",id:"other-adjustments-1",level:3},{value:"Some feature usage examples",id:"some-feature-usage-examples-1",level:3},{value:"finder - find files or dir",id:"finder---find-files-or-dir",level:4},{value:"strutil.ParseSizeRange",id:"strutilparsesizerange",level:4},{value:"timex.ParseRange()",id:"timexparserange",level:4},{value:"More usage",id:"more-usage",level:2}],p={toc:u},m="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"gookit/goutil")," An extended library of Go's common functionality. Contains: number, string, slice/array, Map, struct, reflection, text, file, error, time and date, test, CLI, command run, system information, formatting, common information acquisition, etc."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Github"),": ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/gookit/goutil"},"https://github.com/gookit/goutil"))),(0,i.kt)("h2",{id:"v0610-change-log"},"v0.6.10 change log"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Full changelog ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/gookit/goutil/compare/v0.6.9...v0.6.10"},"v0.6.9...v0.6.10"))),(0,i.kt)("h3",{id:"-new-features"},"\u2728 New features"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u2728 feat: testutil - adds a new child package ",(0,i.kt)("inlineCode",{parentName:"li"},"fakeobj")," to create fake objects for testing"),(0,i.kt)("li",{parentName:"ul"},"\u2728 feat: testutil - adds a new function NewEchoServer() to start the echo server"),(0,i.kt)("li",{parentName:"ul"},"\u2728 feat: byteutil - Buffer adds more useful methods for ease of use"),(0,i.kt)("li",{parentName:"ul"},"\u2728 feat: dump - Special handling of custom int, uint type values, will print instructions in String format"),(0,i.kt)("li",{parentName:"ul"},"\u2728 feat: fsutil - adds a new function to Glob() quickly list matching files"),(0,i.kt)("li",{parentName:"ul"},"\u267b\ufe0f feat: httpreq - Refactoring the built-in HTTP client httpreq logic")),(0,i.kt)("h3",{id:"-update-adjustments"},"\ud83d\udc54 Update Adjustments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\ud83d\udc54 up: structs - Update and support InitDefaults() for struct slice fields that are not null"),(0,i.kt)("li",{parentName:"ul"},"\ud83d\udc54 up: maputil - ",(0,i.kt)("inlineCode",{parentName:"li"},"SimpleMerge()")," Supports deep merging of map","[string]","any data")),(0,i.kt)("h3",{id:"other-adjustments"},"Other adjustments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u2705 test: Update some documentation and fix some unit tests"),(0,i.kt)("li",{parentName:"ul"},"\u2b06\ufe0f dep: Update golang.org/x depends on the latest version")),(0,i.kt)("h3",{id:"some-feature-usage-examples"},"Some feature usage examples"),(0,i.kt)("h4",{id:"dump---prints-custom-types"},"dump - prints custom types"),(0,i.kt)("p",null,"dump - special handles custom int, uint type values, and will print instructions in String format"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/gookit/goutil/v0.6.10/dump/_examples/custom_type.png",alt:"dump custom_type.png"})),(0,i.kt)("h4",{id:"initialize-the-struct"},"Initialize the struct"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Support for initializing the use of environment variables"),(0,i.kt)("li",{parentName:"ul"},"Support initializing slice fields and nesting structs")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'type ExtraDefault struct {\n    City   string `default:"some where"`\n    Github string `default:"${ GITHUB_ADDR }"`\n}\n\ntype User struct {\n    Name  string        `default:"inhere"`\n    Age   int           `default:"300"`\n    Extra *ExtraDefault `default:""` // mark: need init\n}\n\noptFn := func(opt *structs.InitOptions) {\n    opt.ParseEnv = true\n}\n\nobj := &User{}\nerr := structs.InitDefaults(obj, optFn)\ngoutil.PanicErr(err)\n\ndump.P(obj)\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Initialization result:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'&structs_test.User {\n  Name: string("inhere"), #len=6\n  Age: int(300),\n  Extra: &structs_test.ExtraDefault {\n    City: string("some where"), #len=10\n    Github: string("https://some .... url"), #len=21\n  },\n},\n')),(0,i.kt)("h4",{id:"test-with-echo-server"},"Test with Echo Server"),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"testutil.NewEchoServer()")," to quickly create an HTTP echo server. Convenient for testing HTTP requests, responses, etc."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Usage examples:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="example_test.go\u201c',title:'"example_test.go\u201c'},'\nvar testSrvAddr string\n\nfunc TestMain(m *testing.M) {\n    s := testutil.NewEchoServer()\n    defer s.Close()\n\n    testSrvAddr = "http://" + s.Listener.Addr().String()\n    fmt.Println("server addr:", testSrvAddr)\n\n    m.Run()\n}\n\nfunc TestNewEchoServer(t *testing.T) {\n    // can direct request the echo server\n    r, err := http.Post(testSrvAddr, "text/plain", strings.NewReader("hello!"))\n    assert.NoErr(t, err)\n\n    // binding response to the testutil.EchoReply\n    rr := testutil.ParseRespToReply(r)\n    dump.P(rr)\n    assert.Eq(t, "POST", rr.Method)\n    assert.Eq(t, "text/plain", rr.ContentType())\n    assert.Eq(t, "hello!", rr.Body)\n}\n')),(0,i.kt)("h2",{id:"v069-change-log"},"v0.6.9 change log"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Full changelog ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/gookit/goutil/compare/v0.6.8...v0.6.9"},"v0.6.8...v0.6.9"))),(0,i.kt)("h3",{id:"-new-features-1"},"\u2728 New features"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"strutil - Added ",(0,i.kt)("inlineCode",{parentName:"li"},"ToByteSize(),SafeByteSize()")," for converting size string (eg: 5MB) to byte size"),(0,i.kt)("li",{parentName:"ul"},"strutil has added ",(0,i.kt)("inlineCode",{parentName:"li"},"ParseSizeRange()")," to facilitate and quickly parse string size range expressions eg: ",(0,i.kt)("inlineCode",{parentName:"li"},"200kb~50mb")),(0,i.kt)("li",{parentName:"ul"},"strutil - Added new utility functions: ",(0,i.kt)("inlineCode",{parentName:"li"},"DatetimeNo(), RandWithTpl(), SimpleMatch()")),(0,i.kt)("li",{parentName:"ul"},"byteutil - Add new utility functions: ",(0,i.kt)("inlineCode",{parentName:"li"},"Random()"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"AppendAny()")),(0,i.kt)("li",{parentName:"ul"},"fsutil - Add new utility functions: ",(0,i.kt)("inlineCode",{parentName:"li"},"ReadOrErr()"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"ReadStringOrErr()")),(0,i.kt)("li",{parentName:"ul"},"cliutil - Add new utility functions: ",(0,i.kt)("inlineCode",{parentName:"li"},"Confirm()"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"ReadAsBool()")),(0,i.kt)("li",{parentName:"ul"},"errorx - Add new utility functions ",(0,i.kt)("inlineCode",{parentName:"li"},"Err(), Errf()")," for easy creation of error"),(0,i.kt)("li",{parentName:"ul"},"structs - ",(0,i.kt)("inlineCode",{parentName:"li"},"InitDefaults()")," enhanced to support nested structure pointer initialization"),(0,i.kt)("li",{parentName:"ul"},"structs - ",(0,i.kt)("inlineCode",{parentName:"li"},"SetValues()")," enhanced to support setting and processing structure pointer values"),(0,i.kt)("li",{parentName:"ul"},"structs - Add ",(0,i.kt)("inlineCode",{parentName:"li"},"ToSMap(), TryToSMap(), TryToSMap()")," to convert structure to string map"),(0,i.kt)("li",{parentName:"ul"},"testutil/assert new assertion methods ",(0,i.kt)("inlineCode",{parentName:"li"},"NotContainsKey()"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"NotContainsKeys()")),(0,i.kt)("li",{parentName:"ul"},"Reflects new utility methods ",(0,i.kt)("inlineCode",{parentName:"li"},"UnexportedValue()"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"SetUnexportedValue()")),(0,i.kt)("li",{parentName:"ul"},"maputil new tool functions ",(0,i.kt)("inlineCode",{parentName:"li"},"HasOneKey(), CombineToMap(), TryAnyMap()")),(0,i.kt)("li",{parentName:"ul"},"Added utility functions ",(0,i.kt)("inlineCode",{parentName:"li"},"AnyToSlice(), CombineToMap()")," in arrutil"),(0,i.kt)("li",{parentName:"ul"},"jsonutil has added tool methods ",(0,i.kt)("inlineCode",{parentName:"li"},"IsJSON(), IsJSONFast()")," to check whether it is JSON"),(0,i.kt)("li",{parentName:"ul"},"\u267b\ufe0f fsutil/finder file and directory search reconstruction, enhanced functions, more convenient to use"),(0,i.kt)("li",{parentName:"ul"},"timex new utility functions ",(0,i.kt)("inlineCode",{parentName:"li"},"NowAddSec(), IsDuration(), InRange()")),(0,i.kt)("li",{parentName:"ul"},"timex ",(0,i.kt)("inlineCode",{parentName:"li"},"ToDuration()")," enhanced, support unit d, w and long unit hour, min, sec"),(0,i.kt)("li",{parentName:"ul"},"mathutil new tool methods ",(0,i.kt)("inlineCode",{parentName:"li"},"InRange()"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"OutRange()"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"InUintRange()")),(0,i.kt)("li",{parentName:"ul"},"fsutil new tool method ",(0,i.kt)("inlineCode",{parentName:"li"},"RemoveSub()")," to quickly delete subdirectories and files"),(0,i.kt)("li",{parentName:"ul"},"maputil ",(0,i.kt)("inlineCode",{parentName:"li"},"GetByPath()")," is enhanced to support matching paths similar to ",(0,i.kt)("inlineCode",{parentName:"li"},"top.*.field")," to get values")),(0,i.kt)("h3",{id:"-update-adjustments-1"},"\ud83d\udc54 Update adjustments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"strutil optimization ",(0,i.kt)("inlineCode",{parentName:"li"},"ToByteSize()")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"GlobMatch()")," logic"),(0,i.kt)("li",{parentName:"ul"},"struts - ",(0,i.kt)("inlineCode",{parentName:"li"},"InitDefaults()")," supports initializing non-zero ptr substructure fields"),(0,i.kt)("li",{parentName:"ul"},"\ud83d\udca5 struts - ",(0,i.kt)("inlineCode",{parentName:"li"},"InitDefaults()")," To initialize a substructure, the field must be marked with ",(0,i.kt)("inlineCode",{parentName:"li"},'default:""'))),(0,i.kt)("h3",{id:"other-adjustments-1"},"Other adjustments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\ud83d\udcdd doc: README documentation updated, some subpackages added README"),(0,i.kt)("li",{parentName:"ul"},"\u2705 test: Added and fixed some unit tests"),(0,i.kt)("li",{parentName:"ul"},"\u2b06\ufe0f dep: update golang.org/x dependencies to latest version")),(0,i.kt)("h3",{id:"some-feature-usage-examples-1"},"Some feature usage examples"),(0,i.kt)("h4",{id:"finder---find-files-or-dir"},"finder - find files or dir"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"fsutil/finder")," Provides a simple and fast way to find matching files and directories."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Built-in support Name, extension, suffix, prefix, glob, path, etc. include or exclude"),(0,i.kt)("li",{parentName:"ul"},"Support matching file size, modification time (ModTime) and other extended matching methods")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'ff := finder.NewFinder("/path/to/dir/").\n    // OnlyFindDir(). // default find files\n    UseAbsPath().\n    WithoutDotDir().\n    WithDirName("testdata").\n    Include(finder.HumanModTime("<10m")). // latest 10 minutes, to Now\n    Include(finder.HumanSize("500kb~10mb")) // limit file size\n\n// Find() returns chan, can be for handling\nfor el := range f.Find() {\n    fmt.Println(el.Path())\n}\n')),(0,i.kt)("h4",{id:"strutilparsesizerange"},"strutil.ParseSizeRange"),(0,i.kt)("p",null,"It is easy to parse the string size range to byte size."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'opt := &strutil.ParseSizeOpt{}\n\nmix, max, err := strutil.ParseSizeRange("1kb~1mb", opt)\ngoutil.PanicErr(err)\nfmt.Println(min, max) // OUTPUT: 1024, 1048576\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples of supported expression formats:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},'"1KB~2MB"       => 1KB to 2MB\n"-1KB"          => <1KB\n"~1MB"          => <1MB\n"< 1KB"         => <1KB\n"1KB"           => >1KB\n"1KB~"          => >1KB\n">1KB"          => >1KB\n"+1KB"          => >1KB\n')),(0,i.kt)("h4",{id:"timexparserange"},"timex.ParseRange()"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"timex.ParseRange()")," It is easy to quickly parse the relative time size range or keyword into ",(0,i.kt)("inlineCode",{parentName:"p"},"time.Time")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'start, end, err := ParseRange("-1h~1h", nil)\ngoutil.PanicErr(err)\n\n\nfmt.Println(start, end)\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples of supported expression formats:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},'"-5h~-1h"           => 5 hours ago to 1 hour ago\n"1h~5h"             => 1 hour after to 5 hours after\n"-1h~1h"            => 1 hour ago to 1 hour after\n"-1h"               => 1 hour ago to feature. eq "-1h~"\n"-1h~0"             => 1 hour ago to now.\n"< -1h" OR "~-1h"   => 1 hour ago.\n"> 1h" OR "1h"      => 1 hour after to feature\n\n// keyword: now, today, yesterday, tomorrow\n"today"          => today start to today end\n"yesterday"      => yesterday start to yesterday end\n"tomorrow"       => tomorrow start to tomorrow end\n')),(0,i.kt)("h2",{id:"more-usage"},"More usage"),(0,i.kt)("p",null,"For more instructions, see Unit tests for ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/gookit/slog/blob/master/README.zh-CN.md"},"README")," and related methods"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Github"),": ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/gookit/goutil"},"https://github.com/gookit/goutil"))))}d.isMDXComponent=!0}}]);